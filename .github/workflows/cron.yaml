name: Run Twitter scraper every 30 minutes

on:
  schedule:
    - cron: "*/30 * * * *"   # cada 30 minutos (UTC)
  workflow_dispatch:

# Necesario para poder pushear al repo con GITHUB_TOKEN
permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest
    environment: prueba-Actions          # usa este Environment si tus secrets estÃ¡n ahÃ­
    concurrency:
      group: hourly-scrape
      cancel-in-progress: true

    # Config no sensible desde YAML (el script lee ACTOR_ID y SEARCH_TERMS)
    env:
      ACTOR_ID: ${{ vars.ACTOR_ID }}                # o ponelo inline: "apidojo/twitter-scraper-lite"
      SEARCH_TERMS: ${{ vars.SEARCH_TERMS }}        # ej: '("mercado libre" OR mercadolibre)'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run scraper
        env:
          APIFY_TOKEN: ${{ secrets.APIFY_TOKEN }}   # mantenÃ© el token como Secret
        run: python script.py

      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: twitter-scrape-output
          path: output/*.csv
          if-no-files-found: warn
          retention-days: 30

      # ğŸ”¥ Borrar CSVs con mÃ¡s de 7 dÃ­as (segÃºn timestamp del nombre)
      - name: Purge CSVs older than 7 days
        run: |
          set -euo pipefail
          shopt -s nullglob

          CUTOFF=$(date -u -d "7 days ago" +%s)

          # Recorremos archivos tipo: output/twitter_scrape_YYYYMMDDTHHMMSSZ.csv
          for f in output/twitter_scrape_*.csv; do
            base=${f##*/}
            stamp=${base#twitter_scrape_}
            stamp=${stamp%.csv}  # 20250822T010203Z

            # Convertimos a ISO para que 'date' lo parsee
            iso="${stamp:0:4}-${stamp:4:2}-${stamp:6:2} ${stamp:9:2}:${stamp:11:2}:${stamp:13:2}Z"
            ts=$(date -u -d "$iso" +%s 2>/dev/null || echo 0)

            if (( ts > 0 && ts < CUTOFF )); then
              echo "Deleting $f"
              rm -f "$f"
            fi
          done

      # Commit manual que incluye archivos nuevos, cambios y eliminaciones dentro de output/
      - name: Commit outputs to repo (include deletions)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A output
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "scrape: purge CSVs older than 7d ${{ github.run_id }}"
            git push
          fi
